<?xml version="1.0" encoding="UTF-8"?>
<!-- Application context definition for PetClinic Datasource. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
         http://www.springframework.org/schema/jdbc
         http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<!-- ========================= DATASOURCE DEFINITION ========================= -->

	<util:properties id="ds" location="classpath:spring/data-access.properties" />

	<!-- DataSource configuration for Apache Commons DBCP. -->
	<!-- dbcp连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
	<property name="driverClassName">
        <value>#{ds['db.driver']}</value>
        </property>
        <property name="url">
            <value>#{ds['db.url']}</value>
        </property>
        <property name="username">
            <value>#{ds['db.username']}</value>
        </property>
        <property name="password">
            <value>#{ds['db.password']}</value>
        </property>
        <property name="maxActive">
            <value>#{ds['db.maxActive']}</value>
        </property>
        <property name="maxWait">
            <value>#{ds['db.maxWait']}</value>
        </property>
        <property name="defaultAutoCommit" value="false"/>
	</bean>
	
	
	<!-- redis -->
	
	<util:properties id="redis" location="classpath:spring/redis-access.properties" />
	<!-- redis pool -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxActive">
        	<value>#{redis['redis.pool.maxActive']}</value>
        </property>  
        <property name="maxIdle">
        	<value>#{redis['redis.pool.maxIdle']}</value>
        </property>  
        <property name="maxWait">
        	<value>#{redis['redis.pool.maxWait']}</value>
        </property>  
        <property name="minEvictableIdleTimeMillis">
        	<value>#{redis['redis.pool.minEvictableIdleTimeMillis']}</value>
        </property>  
        <property name="numTestsPerEvictionRun">
        	<value>#{redis['redis.pool.numTestsPerEvictionRun']}</value>
        </property>  
        <property name="timeBetweenEvictionRunsMillis">
        	<value>#{redis['redis.pool.timeBetweenEvictionRunsMillis']}</value>
        </property>  
        <property name="whenExhaustedAction">
        	<value>#{redis['redis.pool.whenExhaustedAction']}</value>
        </property>  
        <property name="testOnBorrow">
        	<value>#{redis['redis.pool.testOnBorrow']}</value>
        </property>  
        <property name="testOnReturn">
        	<value>#{redis['redis.pool.testOnReturn']}</value>
        </property>  
        <property name="testWhileIdle">
        	<value>#{redis['redis.pool.testWhileIdle']}</value>
        </property>  
    </bean>  
    
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">  
        <property name="poolConfig" ref="jedisPoolConfig"></property>  
        <property name="hostName">
        	<value>#{redis['redis.host']}</value>
        </property>  
        <property name="port">
        	<value>#{redis['redis.port']}</value>
        </property>  
        <!-- <property name="password"><value>#{redis['redis.pool.password']}</value></property> -->  
        <property name="timeout">
        	<value>#{redis['redis.timeout']}</value>
        </property>  
        <property name="usePool">
        	<value>#{redis['redis.usePool']}</value>
        </property>  
    </bean>  

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>  
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
        </property>
        <property name="hashKeySerializer">  
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
	    </property>  
	    <property name="valueSerializer">  
	        <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
	    </property>  
	    <property name="hashValueSerializer">  
	        <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
	    </property> 
    </bean>
	
	 
	<!-- MyBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="configLocation">
            <value>classpath:mybatis-sql-map-config.xml</value>
        </property>
	</bean>
	

	<bean name="manager_mapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.huizhi.dass.manager.dao, com.huizhi.dass.operation.dao" />
	</bean> 
	
	<!-- 扫描DAO -->
    <context:component-scan base-package="com.huizhi.dass.manager.dao"/>
    <context:component-scan base-package="com.huizhi.dass.operation.dao"/>	
    
    <!-- 扫描cache service -->
	<context:component-scan base-package="com.huizhi.dass.operation.cache"/>
	
	
	
</beans>